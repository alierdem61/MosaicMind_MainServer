// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto
#ifndef GRPC_test_2eproto__INCLUDED
#define GRPC_test_2eproto__INCLUDED

#include "test.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mosaic {

class YourService final {
 public:
  static constexpr char const* service_full_name() {
    return "mosaic.YourService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::mosaic::TextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>> AsyncProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>>(AsyncProcessImageAndTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>> PrepareAsyncProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>>(PrepareAsyncProcessImageAndTextRaw(context, request, cq));
    }
    // New streaming RPC method for sending the model file
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mosaic::ModelChunk>> SendModelStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mosaic::ModelChunk>>(SendModelStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mosaic::ModelChunk>> AsyncSendModelStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mosaic::ModelChunk>>(AsyncSendModelStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mosaic::ModelChunk>> PrepareAsyncSendModelStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mosaic::ModelChunk>>(PrepareAsyncSendModelStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status TrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::mosaic::TextResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>> AsyncTrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>>(AsyncTrainModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>> PrepareAsyncTrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>>(PrepareAsyncTrainModelRaw(context, request, cq));
    }
    virtual ::grpc::Status SendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mosaic::IntValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::IntValue>> AsyncSendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::IntValue>>(AsyncSendIntValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::IntValue>> PrepareAsyncSendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::IntValue>>(PrepareAsyncSendIntValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::mosaic::ModelChunk>> ReceiveModelStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::mosaic::ModelChunk>>(ReceiveModelStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mosaic::ModelChunk>> AsyncReceiveModelStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mosaic::ModelChunk>>(AsyncReceiveModelStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mosaic::ModelChunk>> PrepareAsyncReceiveModelStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::mosaic::ModelChunk>>(PrepareAsyncReceiveModelStreamRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // New streaming RPC method for sending the model file
      virtual void SendModelStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::mosaic::ModelChunk>* reactor) = 0;
      virtual void TrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mosaic::IntValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mosaic::IntValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReceiveModelStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::mosaic::ModelChunk>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>* AsyncProcessImageAndTextRaw(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>* PrepareAsyncProcessImageAndTextRaw(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mosaic::ModelChunk>* SendModelStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mosaic::ModelChunk>* AsyncSendModelStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mosaic::ModelChunk>* PrepareAsyncSendModelStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>* AsyncTrainModelRaw(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::TextResponse>* PrepareAsyncTrainModelRaw(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::IntValue>* AsyncSendIntValueRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mosaic::IntValue>* PrepareAsyncSendIntValueRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::mosaic::ModelChunk>* ReceiveModelStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::mosaic::ModelChunk>* AsyncReceiveModelStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::mosaic::ModelChunk>* PrepareAsyncReceiveModelStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::mosaic::TextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>> AsyncProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>>(AsyncProcessImageAndTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>> PrepareAsyncProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>>(PrepareAsyncProcessImageAndTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mosaic::ModelChunk>> SendModelStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mosaic::ModelChunk>>(SendModelStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mosaic::ModelChunk>> AsyncSendModelStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mosaic::ModelChunk>>(AsyncSendModelStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mosaic::ModelChunk>> PrepareAsyncSendModelStream(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mosaic::ModelChunk>>(PrepareAsyncSendModelStreamRaw(context, request, cq));
    }
    ::grpc::Status TrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::mosaic::TextResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>> AsyncTrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>>(AsyncTrainModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>> PrepareAsyncTrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>>(PrepareAsyncTrainModelRaw(context, request, cq));
    }
    ::grpc::Status SendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mosaic::IntValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::IntValue>> AsyncSendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::IntValue>>(AsyncSendIntValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::IntValue>> PrepareAsyncSendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mosaic::IntValue>>(PrepareAsyncSendIntValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::mosaic::ModelChunk>> ReceiveModelStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::mosaic::ModelChunk>>(ReceiveModelStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::mosaic::ModelChunk>> AsyncReceiveModelStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::mosaic::ModelChunk>>(AsyncReceiveModelStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::mosaic::ModelChunk>> PrepareAsyncReceiveModelStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::mosaic::ModelChunk>>(PrepareAsyncReceiveModelStreamRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response, std::function<void(::grpc::Status)>) override;
      void ProcessImageAndText(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendModelStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::mosaic::ModelChunk>* reactor) override;
      void TrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response, std::function<void(::grpc::Status)>) override;
      void TrainModel(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mosaic::IntValue* response, std::function<void(::grpc::Status)>) override;
      void SendIntValue(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mosaic::IntValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReceiveModelStream(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::mosaic::ModelChunk>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>* AsyncProcessImageAndTextRaw(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>* PrepareAsyncProcessImageAndTextRaw(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mosaic::ModelChunk>* SendModelStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::mosaic::ModelChunk>* AsyncSendModelStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mosaic::ModelChunk>* PrepareAsyncSendModelStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>* AsyncTrainModelRaw(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mosaic::TextResponse>* PrepareAsyncTrainModelRaw(::grpc::ClientContext* context, const ::mosaic::ImageAndTextRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mosaic::IntValue>* AsyncSendIntValueRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mosaic::IntValue>* PrepareAsyncSendIntValueRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::mosaic::ModelChunk>* ReceiveModelStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::mosaic::ModelChunk>* AsyncReceiveModelStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::mosaic::ModelChunk>* PrepareAsyncReceiveModelStreamRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessImageAndText_;
    const ::grpc::internal::RpcMethod rpcmethod_SendModelStream_;
    const ::grpc::internal::RpcMethod rpcmethod_TrainModel_;
    const ::grpc::internal::RpcMethod rpcmethod_SendIntValue_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveModelStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ProcessImageAndText(::grpc::ServerContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response);
    // New streaming RPC method for sending the model file
    virtual ::grpc::Status SendModelStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::mosaic::ModelChunk>* writer);
    virtual ::grpc::Status TrainModel(::grpc::ServerContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response);
    virtual ::grpc::Status SendIntValue(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mosaic::IntValue* response);
    virtual ::grpc::Status ReceiveModelStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::mosaic::ModelChunk>* reader, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessImageAndText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessImageAndText() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProcessImageAndText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessImageAndText(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessImageAndText(::grpc::ServerContext* context, ::mosaic::ImageAndTextRequest* request, ::grpc::ServerAsyncResponseWriter< ::mosaic::TextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendModelStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendModelStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::mosaic::ModelChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendModelStream(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::mosaic::ModelChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TrainModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TrainModel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TrainModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainModel(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrainModel(::grpc::ServerContext* context, ::mosaic::ImageAndTextRequest* request, ::grpc::ServerAsyncResponseWriter< ::mosaic::TextResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendIntValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendIntValue() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendIntValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIntValue(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::mosaic::IntValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendIntValue(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::mosaic::IntValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveModelStream() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReceiveModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveModelStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mosaic::ModelChunk>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveModelStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::google::protobuf::Empty, ::mosaic::ModelChunk>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProcessImageAndText<WithAsyncMethod_SendModelStream<WithAsyncMethod_TrainModel<WithAsyncMethod_SendIntValue<WithAsyncMethod_ReceiveModelStream<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ProcessImageAndText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessImageAndText() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response) { return this->ProcessImageAndText(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessImageAndText(
        ::grpc::MessageAllocator< ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProcessImageAndText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessImageAndText(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessImageAndText(
      ::grpc::CallbackServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendModelStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::mosaic::ModelChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request) { return this->SendModelStream(context, request); }));
    }
    ~WithCallbackMethod_SendModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendModelStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::mosaic::ModelChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mosaic::ModelChunk>* SendModelStream(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TrainModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TrainModel() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mosaic::ImageAndTextRequest* request, ::mosaic::TextResponse* response) { return this->TrainModel(context, request, response); }));}
    void SetMessageAllocatorFor_TrainModel(
        ::grpc::MessageAllocator< ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TrainModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainModel(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TrainModel(
      ::grpc::CallbackServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendIntValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendIntValue() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::mosaic::IntValue>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::mosaic::IntValue* response) { return this->SendIntValue(context, request, response); }));}
    void SetMessageAllocatorFor_SendIntValue(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::mosaic::IntValue>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::mosaic::IntValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendIntValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIntValue(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::mosaic::IntValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendIntValue(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::mosaic::IntValue* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReceiveModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveModelStream() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::mosaic::ModelChunk, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, ::google::protobuf::Empty* response) { return this->ReceiveModelStream(context, response); }));
    }
    ~WithCallbackMethod_ReceiveModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveModelStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mosaic::ModelChunk>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::mosaic::ModelChunk>* ReceiveModelStream(
      ::grpc::CallbackServerContext* /*context*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ProcessImageAndText<WithCallbackMethod_SendModelStream<WithCallbackMethod_TrainModel<WithCallbackMethod_SendIntValue<WithCallbackMethod_ReceiveModelStream<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ProcessImageAndText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessImageAndText() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProcessImageAndText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessImageAndText(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendModelStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendModelStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::mosaic::ModelChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TrainModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TrainModel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TrainModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainModel(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendIntValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendIntValue() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendIntValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIntValue(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::mosaic::IntValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveModelStream() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReceiveModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveModelStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mosaic::ModelChunk>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessImageAndText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessImageAndText() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProcessImageAndText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessImageAndText(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessImageAndText(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendModelStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendModelStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::mosaic::ModelChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendModelStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TrainModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TrainModel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TrainModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainModel(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrainModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendIntValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendIntValue() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendIntValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIntValue(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::mosaic::IntValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendIntValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveModelStream() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReceiveModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveModelStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mosaic::ModelChunk>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveModelStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessImageAndText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessImageAndText() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessImageAndText(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProcessImageAndText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessImageAndText(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessImageAndText(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendModelStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SendModelStream(context, request); }));
    }
    ~WithRawCallbackMethod_SendModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendModelStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::mosaic::ModelChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SendModelStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TrainModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TrainModel() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TrainModel(context, request, response); }));
    }
    ~WithRawCallbackMethod_TrainModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrainModel(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TrainModel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendIntValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendIntValue() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendIntValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendIntValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendIntValue(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::mosaic::IntValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendIntValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveModelStream() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->ReceiveModelStream(context, response); }));
    }
    ~WithRawCallbackMethod_ReceiveModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveModelStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::mosaic::ModelChunk>* /*reader*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ReceiveModelStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessImageAndText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessImageAndText() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>* streamer) {
                       return this->StreamedProcessImageAndText(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessImageAndText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessImageAndText(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessImageAndText(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mosaic::ImageAndTextRequest,::mosaic::TextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TrainModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TrainModel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mosaic::ImageAndTextRequest, ::mosaic::TextResponse>* streamer) {
                       return this->StreamedTrainModel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TrainModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TrainModel(::grpc::ServerContext* /*context*/, const ::mosaic::ImageAndTextRequest* /*request*/, ::mosaic::TextResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTrainModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mosaic::ImageAndTextRequest,::mosaic::TextResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendIntValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendIntValue() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::mosaic::IntValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::mosaic::IntValue>* streamer) {
                       return this->StreamedSendIntValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendIntValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendIntValue(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::mosaic::IntValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendIntValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::mosaic::IntValue>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ProcessImageAndText<WithStreamedUnaryMethod_TrainModel<WithStreamedUnaryMethod_SendIntValue<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SendModelStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SendModelStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::mosaic::ModelChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::mosaic::ModelChunk>* streamer) {
                       return this->StreamedSendModelStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SendModelStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendModelStream(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::mosaic::ModelChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSendModelStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::mosaic::ModelChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SendModelStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ProcessImageAndText<WithSplitStreamingMethod_SendModelStream<WithStreamedUnaryMethod_TrainModel<WithStreamedUnaryMethod_SendIntValue<Service > > > > StreamedService;
};

}  // namespace mosaic


#endif  // GRPC_test_2eproto__INCLUDED
